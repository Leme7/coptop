#!/usr/bin/env php
<?php
/*
	Author:   Charles Thompson <01charles.t@gmail.com>
	Created:  July 06, 2015
	GitHub:   https://github.com/vuther/coptop
*/
error_reporting(E_ERROR | E_PARSE);

//////////////////////////////////
//       Defaults Settings      //
//////////////////////////////////
$config  = array(
	'user'           => '',
	'password'       => '',
	'server'         => '',
	'port'           => 3306,
	'header'         => 1,
	'delay'          => 1,
	'show_idle'      => 0,
	'reverse_sort'   => 1,
	'resolve_ip'     => 1,
	'ansi_refresh'   => 1,
	'user_filter'    => '',
	'db_filter'      => '',
	'host_filter'    => '',
	'time_filter'    => 0,
	'notify_email'   => '',
	'notify_limit'   => 30
);

// MySQL commands used
$commands = array(
	'pl_query'     => 'SHOW FULL PROCESSLIST',
	'pl_table'     => 'SELECT Id, User, Host, db, Command, Host, Time_MS As Time, Info, State FROM information_schema.PROCESSLIST',
	'status'       => 'SHOW GLOBAL STATUS',
	'variables'    => 'SHOW GLOBAL VARIABLES',
	'master'       => 'SHOW MASTER STATUS',
	'slave'        => 'SHOW SLAVE STATUS',
	'databases'    => 'SHOW DATABASES'
);

// Loop timings
$key_press_delay    = 10;
$delay_microseconds = 100 * 1000;

// These are helpful to make coptop work smoothly w/ Linux
$system_options     = 'stty echo; stty icanon; stty iexten; stty icrnl';

//////////////////////////////////
//        ANSI Characters       //
//////////////////////////////////
$CSI        = "\x1b[";
$RESET      = $CSI . "0m";
$RED        = $CSI . "0;31m";
$GREEN      = $CSI . "0;32m";
$YELLOW     = $CSI . "0;33m";
$MAGENTA    = $CSI . "0;35m";
$CYAN       = $CSI . "0;36m";
$BOLD_CYAN  = $CSI . "1;36m";
$BOLD       = $CSI . "1m";
$UNDERLINE  = $CSI . "4m";
$ansi_chars = array(
	'CURSOR_TO_START' => $CSI . "H",    // Start the cursor
	'EEL'             => $CSI . "K",    // Clear line from cursor right
	'EEB'             => $CSI . "J",    // Clear screen from cursor down
	'HIDE_CURSOR'     => $CSI . "?25l", // Hide cursor
	'SHOW_CURSOR'     => $CSI . "?25h"  // Show cursor
);

//////////////////////////////////
//  Notify user of new version  //
//////////////////////////////////
$master_version = trim(file_get_contents('https://raw.githubusercontent.com/vuther/coptop/master/version'));
$version        = "v1.2";

if ($master_version > $version) {
	$message = $RED . "Your version: $RESET$version$RESET\n" .
		$GREEN . "New version:  $RESET$master_version$RESET\n\n" .
		"There's a new version of$BOLD_CYAN coptop$RESET available! Please receive the latest and greatest by either:\n" .
		"   - Downloading from https://github.com/vuther/coptop\n" .
		"   - git pull\n\n" .
		$CYAN . "Press any key to resume$RESET\n";

	pause($message);
}

//////////////////////////////////
//   Check required functions   //
//////////////////////////////////
if (!function_exists('mysqli_connect')) {
	exit($RED . "You do not have mysqli installed. Install it via apt-get install php5-mysqlnd$RESET\n");
}
if (!function_exists('readline_callback_handler_install')) {
	exit($RED . "Your PHP version was not compiled with readline! It has to be compiled " .
				"with readline for coptop to work.$RESET\n");
}
if(!ini_get('date.timezone')) {
	date_default_timezone_set('America/New_York');
}

//////////////////////////////////
//   Command line parameters    //
//////////////////////////////////
$opts = getopt('u:p:h:P:', array('delay:', 'idle:', 'sort:', 'resolve:', 'ansi:', 'header:', 'notify:',
	                             'limit:', 'help', 'prompt'));

if (isset($opts['help'])) helpme('--help');

// Use my.cnf client's information if available
if (isset($_SERVER['HOME']) && file_exists($_SERVER['HOME'] . "/.my.cnf")) {
	$mycnf = parse_ini_file($_SERVER['HOME'] . "/.my.cnf", true, INI_SCANNER_RAW);

	if (isset($mycnf['client']['user']) && !isset($opts['u'])) {
		$config['user'] = $mycnf['client']['user'];
	}
	if (isset($mycnf['client']['password']) && !isset($opts['p']) && !isset($opts['prompt'])) {
		$config['password'] = $mycnf['client']['password'];
	}
}

// Check to make sure these variables have values
if (!isset($opts['u']) && !isset($mycnf['client']['user'])) {
	exit($RED . "You did not enter a username! Use --help parameter if you need assistance.$RESET\n");
}
if (!isset($opts['p']) && !isset($opts['prompt']) && !isset($mycnf['client']['password'])) {
	exit($RED . "You did not enter a password! Use --help parameter if you need assistance.$RESET\n");
}
if (!isset($opts['h'])) {
	exit($RED . "You did not enter a host! Use --help parameter if you need assistance.$RESET\n");
}

// Set config variables if they're used in command line
if (isset($opts['u']))       $config['user']         = $opts['u'];
if (isset($opts['p']))       $config['password']     = $opts['p'];
if (isset($opts['P']))       $config['port']         = $opts['P'];
if (isset($opts['h']))       $config['server']       = $opts['h'];
if (isset($opts['header']))  $config['header']       = $opts['header'];
if (isset($opts['delay']))   $config['delay']        = $opts['delay'];
if (isset($opts['idle']))    $config['show_idle']    = $opts['idle'];
if (isset($opts['sort']))    $config['reverse_sort'] = $opts['sort'];
if (isset($opts['resolve'])) $config['resolve_ip']   = $opts['resolve'];
if (isset($opts['ansi']))    $config['ansi_refresh'] = $opts['ansi'];
if (isset($opts['notify']))  $config['notify_email'] = $opts['notify'];
if (isset($opts['limit']))   $config['notify_limit'] = $opts['limit'];

// Get password to server privately
if (isset($opts['prompt'])) {
	print($CYAN . "Password: $RESET");
	system('stty -echo');
	$config['password'] = stream_get_line(STDIN, 1024, PHP_EOL);
	system($system_options);
}

//////////////////////////////////
//     Connect to database      //
//////////////////////////////////
$connection = new mysqli($config['server'], $config['user'], $config['password'], '', $config['port']);

if ($connection->connect_error) {
	exit($RED . "Database connection failed to " . $config['server'] . ": " . $connection->connect_error . "$RESET\n");
}

//////////////////////////////////
//    MySQL Server variables    //
//////////////////////////////////
$variables             = execute_query($commands['variables'], 1);
$short_version         = substr($variables['version'], 0, 3);
$version_comment       = strtolower($variables['version_comment']);
$use_processlist_query = 0;

// Determine if processlist query should be used based on mysql version
if ($short_version == '5.0' || $short_version == '5.1' || !$config['header']) {
	$use_processlist_query = 1;
}

// Get proper server version fork
if (strpos($version_comment, 'mariadb cluster') !== false) {
	$db_fork = 'MariaDB Cluster';
} else if (strpos($version_comment, 'mariadb') !== false) {
	$db_fork = 'MariaDB';
} else if (strpos($version_comment, 'percona xtradb cluster') !== false) {
	$db_fork = 'Percona XtraDB Cluster';
} else if (strpos($version_comment, 'percona server') !== false) {
	$db_fork = 'Percona Server';
} else {
	$db_fork = 'MySQL';
	$use_processlist_query = 1; // Regular MySQL doesn't have TIME_MS field in PROCESSLIST table
}

// Get version without the garbage at the end
$db_version = explode('-', $variables['version']);
$db_version = $db_version[0];

// Clear screen and create some variables
$status           = array();
$servers_slaved   = array();
$slow_queries     = array();
$old_cols         = '';
$old_lines        = '';
$first_clear      = 0;
$master_binary    = 1;
$hosts            = array();

//////////////////////////////////
//          Main Loop           //
//////////////////////////////////
while (1) {
	// Height & Width of terminal
	$cols  = exec('tput cols');
	$lines = exec('tput lines');

	// If terminal was resized, clear screen to help ansi refresh option
	if ($cols != $old_cols || $lines != $old_lines) {
		system('clear');
	}

	$old_cols   = $cols;
	$old_lines  = $lines;
	$lines_left = $lines - 1;

	// ANSI characters for smoother refresh
	if ($config['ansi_refresh']) {
		print($ansi_chars['EEL']);
		// This is an ansi refresh hack to fix ghost characters...
		if ($first_clear != 2) {
			system('clear');
			$first_clear++;
		}
	} else {
		system('clear'); // Clear screen
	}
	print($ansi_chars['HIDE_CURSOR']);

	// Padding stuff for ANSI refresh
	$help_section_pad = $cols - 20;
	$underline_pad    = str_repeat(" ", $cols);
	$pad_space        = '';
	$pad_space2       = '';
	if ($config['ansi_refresh']) {
		print($ansi_chars['CURSOR_TO_START']);
		$pad_space  = str_repeat(" " , 10); // This is an ansi refresh hack to fix ghost characters...
		$pad_space2 = str_repeat(" " , 50); // This is an ansi refresh hack to fix ghost characters...
	}

	printf("%-$help_section_pad" . "s", "Monitoring database server$MAGENTA " . $config['server'] . $RESET . " ($db_fork v$db_version)");
	print("$BOLD_CYAN coptop $version$RESET - Press ? for help$RESET\n");
	$lines_left--;

	if ($config['header']) {
		// Save old status data
		$old_status = $status;

		// Get our statuses in arrays
		$status        = execute_query($commands['status'], 1);
		$slave_status  = execute_query($commands['slave'], 2);
		if ($master_binary) {
			$master_status = execute_query($commands['master'], 2);
			if (!$master_status) $master_binary = 0;
		}

		//////////////////////////////////
		//    Calculations for Header   //
		//////////////////////////////////

		// Uptime of server
		$dtF    = new DateTime("@0");
		$dtT    = new DateTime("@" . $status['Uptime']);
		$uptime = $dtF->diff($dtT)->format('%a days, %h hours, %i minutes and %s seconds');

		// Calculate DML Queries Per Second
		if (isset($old_status['Queries'])) {
			$selects_per_sec = $status['Com_select'] - $old_status['Com_select'];
			$updates_per_sec = $status['Com_update'] - $old_status['Com_update'];
			$inserts_per_sec = $status['Com_insert'] - $old_status['Com_insert'];
			$deletes_per_sec = $status['Com_delete'] - $old_status['Com_delete'];
		} else {
			$selects_per_sec = 0;
			$updates_per_sec = 0;
			$inserts_per_sec = 0;
			$deletes_per_sec = 0;
		}

		// MyISAM Efficiency
		if ($status['Key_reads'] && $status['Key_read_requests']) {
			$myisam_hit_rate = sprintf("%.2f%%", (100 - ($status['Key_reads'] / $status['Key_read_requests']) * 100));
		} else {
			$myisam_hit_rate = "N/A";
		}

		// InnoDB Efficiency
		if ($status['Innodb_buffer_pool_read_requests'] && $status['Innodb_buffer_pool_reads']) {
			$innodb_hit_rate = sprintf("%.2f%%", (100 - ($status['Innodb_buffer_pool_reads'] / ($status['Innodb_buffer_pool_read_requests'])) * 100));
		} else {
			$innodb_hit_rate = "N/A";
		}

		// Calculate tmp tables per second
		if (isset($old_status['Created_tmp_disk_tables'])) {
			$tmp_tables_per_sec      = $status['Created_tmp_tables']      - $old_status['Created_tmp_tables'];
			$tmp_disk_tables_per_sec = $status['Created_tmp_disk_tables'] - $old_status['Created_tmp_disk_tables'];
		} else {
			$tmp_tables_per_sec      = 0;
			$tmp_disk_tables_per_sec = 0;
		}

		// Calculate connections per second
		if (isset($old_status['Connections'])) {
			$connections_per_sec  = ($status['Connections'] - $old_status['Connections']) . "/s";
		} else {
			$connections_per_sec  = 0;
		}

		// If delay isn't set to 1 then don't show per second stats
		if ($config['delay'] == 1) {
			$tmp_tables_memory = "$RESET($CYAN$tmp_tables_per_sec/s$RESET)";
			$tmp_tables_disk   = "$RESET($CYAN$tmp_disk_tables_per_sec/s$RESET)";
		} else {
			$tmp_tables_memory = '';
			$tmp_tables_disk   = '';
		}

		//////////////////////////////////
		//     Print Header Section     //
		//////////////////////////////////
		printf("%-18s %s", "MySQL Uptime", "$CYAN$uptime$RESET$pad_space\n");

		if ($config['delay'] == 1) {
			printf("%-18s %s", "Analytics", "Selects:  $CYAN$selects_per_sec" . "/s$RESET, Updates: $CYAN$updates_per_sec/s$RESET, " .
											"Deletes: $CYAN$deletes_per_sec" . "/s$RESET, Inserts: $CYAN$inserts_per_sec/s$RESET$pad_space\n" .
											"                   Connects: $CYAN$connections_per_sec$RESET$pad_space\n");
			$lines_left -= 2;
		}

		print(
			sprintf("%-31s", "\nInnoDB Efficiency: $RESET$CYAN") . sprintf("%-9s", $innodb_hit_rate) . "$RESET" .
			sprintf("%-28s", "Open Tables: $RESET$CYAN") . sprintf("%-9s", $status['Open_tables']) . "$RESET" .
			sprintf("%-32s", "Aborted Clients: $RESET$CYAN") . sprintf("%-9s", $status['Aborted_clients']) . "$RESET$pad_space\n"
			);

		print(
			sprintf("%-30s", "MyISAM Efficiency: $RESET$CYAN") . sprintf("%-9s", $myisam_hit_rate) . "$RESET" .
			sprintf("%-28s", "Opened Tables: $RESET$CYAN") . sprintf("%-9s", $status['Opened_tables']) . "$RESET" .
			sprintf("%-26s", "Aborted Connections: $RESET$CYAN") . sprintf("%-9s", $status['Aborted_connects']) . "$RESET$pad_space\n"
			);

		$tmp_tables_space = strlen($status['Created_tmp_tables']) + 1;

		print(
			sprintf("%-30s", "Threads Connected: $RESET$CYAN") . sprintf("%-9s", $status['Threads_connected']) . "$RESET" .
			sprintf("%-28s", "Threads Created: $RESET$CYAN") . sprintf("%-9s", $status['Threads_created']) . "$RESET" .
			sprintf("%-32s", "Tmp Tables Memory: $RESET$CYAN") . sprintf("%-$tmp_tables_space" . "s", $status['Created_tmp_tables']) .
			"$RESET$tmp_tables_memory$pad_space\n"
			);

		print(
			sprintf("%-30s", "Threads Running: $RESET$CYAN") . sprintf("%-9s", $status['Threads_running']) . "$RESET" .
			sprintf("%-28s", "Threads Cached: $RESET$CYAN") . sprintf("%-9s", $status['Threads_cached']) . "$RESET" .
			sprintf("%-32s", "Tmp Tables Disk: $RESET$CYAN") . sprintf("%-$tmp_tables_space" . "s", $status['Created_tmp_disk_tables']) .
			"$RESET$tmp_tables_disk$pad_space\n"
			);

		if ($slave_status) {
			// Add master host to host array for caching
			if (filter_var($slave_status['Master_Host'], FILTER_VALIDATE_IP)) {
				if (!array_key_exists($slave_status['Master_Host'], $hosts)) {
					$host = gethostbyaddr($slave_status['Master_Host']);

					if (filter_var($host, FILTER_VALIDATE_IP)) {
						$hosts[$slave_status['Master_Host']] = $host;
					} else {
						$host = explode(".", $host);
						$hosts[$slave_status['Master_Host']] = $host[0];
					}
				}
			} else {
				if (!in_array($slave_status['Master_Host'], $hosts)) {
					$hosts[gethostbyname($slave_status['Master_Host'])] = $slave_status['Master_Host'];
				}
			}

			// Output master host in either host or IP form
			if ($config['resolve_ip']) {
				if (filter_var($slave_status['Master_Host'], FILTER_VALIDATE_IP)) {
					$slave_status['Master_Host'] = $hosts[$slave_status['Master_Host']];
				}
			} else {
				if (!filter_var($slave_status['Master_Host'], FILTER_VALIDATE_IP)) {
					$slave_status['Master_Host'] = array_search($slave_status['Master_Host'], $hosts);
				}
			}

			print("\n");
			print("Slaved to Master:  $RESET$CYAN" . $slave_status['Master_Host'] . "$pad_space$RESET\n");
			print(sprintf("%-30s", "Slave IO: $RESET$CYAN") . sprintf("%-9s", $slave_status['Slave_IO_Running']) . "$RESET" . "Reading Log:    " .
				" IO: $RESET$CYAN" . $slave_status['Master_Log_File'] . "$RESET ($CYAN" . $slave_status['Read_Master_Log_Pos'] . "$RESET) - SQL: $CYAN" . $slave_status['Relay_Master_Log_File'] . "$RESET ($CYAN" . $slave_status['Exec_Master_Log_Pos'] . "$RESET)$pad_space\n");
			print(sprintf("%-30s", "Slave SQL: $RESET$CYAN") .  sprintf("%-9s", $slave_status['Slave_SQL_Running']) . "$RESET" . "Seconds Behind:  " .
				"$RESET$CYAN" . $slave_status['Seconds_Behind_Master'] . "$pad_space$RESET\n");

			if ($slave_status['Last_Error']) {
				print(sprintf("%-30s", "Slave Error: $RESET$CYAN") . sprintf("%-9s", $slave_status['Last_Error']) . "$RESET\n");
			} else {
				print(sprintf("%-30s", "Slave Error: $RESET$CYAN") . sprintf("%-9s", "None$RESET\n"));
			}

			$lines_left -= 5;
		}

		if ($master_status) {
			print("\nMaster Binary Log: $CYAN" . $master_status['File'] . "$RESET (position: $CYAN" . $master_status['Position'] . "$RESET)$pad_space\n");
			$lines_left -= 2;

			if ($servers_slaved) {
				sort($servers_slaved);
				print("Slave Server(s):   $CYAN" .  implode(", ", $servers_slaved) . "$pad_space2\n");
				$lines_left--;
			}
		}

		print("$CYAN$UNDERLINE$underline_pad$RESET\n\n");
		$lines_left -= 8;
	} else {
		print "\n";
		$lines_left--;
	}

	$servers_slaved = array(); // Reset it

	//////////////////////////////////
	//  Processlist Thread Section  //
	//////////////////////////////////
	$thread_data = array();

	if ($use_processlist_query) {
		$pl_sql = $commands['pl_query'];
	} else {
		$pl_sql = $commands['pl_table'];
	}

	$data = execute_query($pl_sql, 3);

	// Put threads from processlist into array
	foreach ($data as $thread) {
		$id = $thread['Id'];

		// Hostname/IP format
		$thread['Host'] = explode(":", $thread['Host']); // Remove port from hostname/IP
		$thread['Host'] = $thread['Host'][0];

		// Get host/IP information into array
		if (filter_var($thread['Host'], FILTER_VALIDATE_IP)) {
			if (!array_key_exists($thread['Host'], $hosts)) {
				$host = gethostbyaddr($thread['Host']);

				if (filter_var($host, FILTER_VALIDATE_IP)) {
					$hosts[$thread['Host']] = $host;
				} else {
					$host = explode(".", $host);
					$hosts[$thread['Host']] = $host[0];
				}
			}
		} else {
			if (!in_array($thread['Host'], $hosts)) {
				$hosts[gethostbyname($thread['Host'])] = $thread['Host'];
			}
		}

		// Set user's host to IP or hostname format depending if resolve_ip is on
		if ($config['resolve_ip']) {
			if (filter_var($thread['Host'], FILTER_VALIDATE_IP)) {
				$thread['Host'] = $hosts[$thread['Host']];
			}
		} else {
			if (!filter_var($thread['Host'], FILTER_VALIDATE_IP)) {
				$thread['Host'] = array_search($thread['Host'], $hosts);
			}
		}

		// Save slave servers to array
		if ($thread['Command'] == 'Binlog Dump') $servers_slaved[] = $thread['Host'];

		// Remove newline chars
		$raw_info = $thread['Info'];
		$thread['Info'] = preg_replace('/\s+/', ' ', $thread['Info']);

		$seconds = intval($thread['Time'] / 1000);
		if ($use_processlist_query) {
			$formatted_time = $thread['Time'] . "s";
			$seconds = intval($thread['Time']);
		} else if ($seconds >= 1) {
			$formatted_time = sprintf("%s", $seconds) . "s";
		} else {
			$formatted_time = sprintf("%d", $thread['Time']) . "ms";
		}

		// Save thread data to array
		$thread_data[$id] = array(
			"user"     => $thread['User'],    "host"           => $thread['Host'], "db"      => $thread['db'],
			"command"  => $thread['Command'], "time"           => $thread['Time'], "info"    => $thread['Info'],
			"state"    => $thread['State'],   "formatted_time" => $formatted_time, "seconds" => $seconds,
			"raw_info" => $raw_info
		);

		// Save and notify of slow queries
		if ($thread['Command'] == 'Query' && $config['notify_email'] && $seconds >= $config['notify_limit']
			&& $thread['User'] != 'backup'
			&& $seconds < 99999999) {
			if (!in_array($id, $slow_queries)) {
				$slow_queries[] = $id;
				email_query($id, $thread_data[$id]);
			}
		}
	}

	// Remove slow queries from array that are no longer running
	foreach ($slow_queries as $key => $thread_id) {
		if (!array_key_exists($thread_id, $thread_data) || $thread_data[$thread_id]['command'] != 'Query') {
			unset($slow_queries[$key]);
		}
	}

	// This is to show sleeping threads if there's not a lot threads when you first begin to monitor the server
	if (!isset($first_time) && sizeof($thread_data) <= $lines_left) {
		$config['show_idle'] = 1;
	}

	// Sort by time
	if ($config['reverse_sort']) {
		uasort($thread_data, function($a, $b) {
			return $b['time'] - $a['time'];
		});
	} else {
		uasort($thread_data, function($a, $b) {
			return $a['time'] - $b['time'];
		});
	}

	//////////////////////////////////
	//   Print Processlist Threads  //
	//////////////////////////////////

	// Processlist header
	$free_screen = $cols - 67; // 67 is the length of our headers
	$repeat_char = str_repeat("-", $free_screen - 1);
	print($BOLD . "Identifier   Username   Hostname/IP   Database      Time   Command  Query/State\n" . $RESET);
	print($CYAN . "----------  ---------  ------------  ---------  --------  --------  $repeat_char\n" . $RESET);
	$lines_left -= 2;

	// Loop each thread
	foreach($thread_data as $id => $thread) {
		// Skip thread if these conditions are met
		if (!$lines_left) break;
		if (in_array($thread['info'], $commands)) continue;
		if ($thread['command'] == 'Binlog Dump' && !$config['show_idle']) continue;
		if ($thread['command'] == 'Sleep' && !$config['show_idle']) continue;
		if ($thread['command'] != 'Query' && !$config['show_idle']) continue;
		if ($thread['command'] == 'Query' && !$thread['info']) continue;
		if ($config['user_filter'] && $thread['user'] != $config['user_filter']) continue;
		if ($config['db_filter']   && $thread['db']   != $config['db_filter']) continue;
		if ($config['host_filter'] && $thread['host'] != $config['host_filter']) continue;
		if ($config['time_filter'] && $thread['seconds'] <= $config['time_filter']) continue;
		if ($thread['seconds'] >= 99999999) continue;

		// Use state if there is one
		if ($thread['state'] && !$thread['info']) {
			$info = $thread['state'];
		} else {
			$info = $thread['info'];
		}

		// Determine thread color
		if ($thread['command']  == 'Sleep' ||
			$thread['command']  == 'Connect' ||
			$thread['command']  == "Binlog Dump") { $color = $RESET; }
		else if ($thread['user'] == 'backup') { $color = $MAGENTA; }
		else if ($thread['seconds'] <= 0) {
			if ($thread['time'] <= 500) {
				$color = $GREEN;
			} else {
				$color = $YELLOW;
			}
		}
		else if ($thread['seconds'] == 1) { $color = $YELLOW; }
		else if ($thread['seconds'] >= 2) { $color = $RED; }

		// Print thread
		print($color);
		printf("%10d %10.9s %13.12s %10.9s %9s %9.8s %-$free_screen.$free_screen" . "s",
			$id, $thread['user'], $thread['host'], $thread['db'],
			$thread['formatted_time'], $thread['command'], " $info");
		print("$RESET\n");

		$lines_left--;
		if (!$lines_left) break;
	}

	// Print some ansi characters
	if ($config['ansi_refresh']) print($ansi_chars['EEL'] . $ansi_chars['EEB']);
	print($ansi_chars['SHOW_CURSOR']);

	//////////////////////////////////
	//      Capture Key Press       //
	//////////////////////////////////
	$polling_delay = $config['delay'] * $key_press_delay;
	for ($x = 0; $x < $polling_delay; $x++) {
		$result = '';

		readline_callback_handler_install('', function() { });
		while (1) {
			$r = array(STDIN);
			$w = NULL;
			$e = NULL;
			$n = stream_select($r, $w, $e, 0);
			if ($n && in_array(STDIN, $r)) {
				$c = stream_get_contents(STDIN, 1);
				$result = read_key($c);
			} else {
				$result = read_key('');
			}
			break;
		}

		if ($result) {
			system('clear');
			break; // Break out of key press loop if a command was run
		}
	}

	$first_time = 1;
}

//////////////////////////////////
//          Functions           //
//////////////////////////////////
function read_key($key) {
	global $connection, $thread_data, $config, $BOLD_CYAN, $CYAN, $RESET, $RED, $UNDERLINE, $BOLD, $delay_microseconds, $commands, $hosts, $slave_status;
	$run_command = 0;
	$found       = 0;

	switch ($key) {
		case '?': // Help
			helpme('?');

			$run_command = 1;
			break;
		case 'c': // Clear all filters
			$config['user_filter'] = '';
			$config['db_filter']   = '';
			$config['host_filter'] = '';
			$config['time_filter'] = '';

			print($CYAN . "Cleared all filters!$RESET");
			sleep(1);

			$run_command = 1;
			break;
		case 'd': // Filter by database
			$config['db_filter'] = read_stdin("Database to filter by: ");

			$run_command = 1;
			break;
		case 'D': // Show available databases
			system('clear');

			print("$CYAN$UNDERLINE" . "Available Databases$RESET\n");
			$results = execute_query($commands['databases'], 3);

			foreach ($results as $key => $database) {
				print($database['Database'] . "\n");
			}

			pause();
			$run_command = 1;
			break;
		case 'e': // Explain
			$counter = 1;
			$input   = read_stdin("Thread ID to explain: ");

			if (array_key_exists($input, $thread_data)) {
				system('clear');

				print($CYAN . "Thread ID: $RESET$input\n");
				print($CYAN . "User:      $RESET" . $thread_data[$input]['user'] . " @ " . $thread_data[$input]['host'] . "\n");
				print($CYAN . "Database:  $RESET" . $thread_data[$input]['db'] . "\n");
				print($CYAN . "Command:   $RESET" . $thread_data[$input]['command'] . "\n");
				print($CYAN . "State:     $RESET" . $thread_data[$input]['state'] . "\n");
				print($CYAN . "Time:      $RESET" . $thread_data[$input]['formatted_time'] . "\n\n");

				if ($thread_data[$input]['info']) {
					$connection->query("USE " . $thread_data[$input]['db']);
					$results = execute_query("EXPLAIN " . $thread_data[$input]['raw_info'], 3);

					print("EXPLAIN " .  $thread_data[$input]['raw_info'] . "\n\n");
					foreach ($results as $thread) {
						print "$BOLD_CYAN****************** row $counter ******************$RESET\n";
						foreach ($thread as $key => $value) {
							if (!$value) $value = "NULL";
							printf("%30s:  %s\n", "$CYAN$key$RESET", $value);
						}
						$counter++;
					}
				} else {
					print("No running query!\n");
				}
				pause();
			} else {
				print_error('Invalid Thread ID!', 1);
			}

			$run_command = 1;
			break;
		case 'h': // Filter by hostname/IP
			$config['host_filter'] = read_stdin("Hostname/IP to filter by: ");

			$run_command = 1;
			break;
		case 'H': // Hide/Show headers
			if ($config['header']) {
				$config['header'] = 0;
			} else {
				$config['header'] = 1;
			}

			$run_command = 1;
			break;
		case 'i': // Hide/Show sleeping threads
			if ($config['show_idle']) {
				$config['show_idle']    = 0;
				$config['reverse_sort'] = 1;
			} else {
				$config['show_idle']    = 1;
				$config['reverse_sort'] = 0;
			}

			$run_command = 1;
			break;
		case 'k': // Kill thread by ID
			$input = read_stdin("Kill Thread ID: ");

			if (isset($thread_data[$input])) {
				execute_query("KILL $input", 0);
			} else {
				print_error('Invalid Thread ID!', 1);
			}

			$run_command = 1;
			break;
		case 'K': // Kill by username, hostname, or time range
			$input = read_stdin("Kill by username/hostname/time range (u/h/t): ");

			if ($input == 'u') { // Kill by username
				$user  = read_stdin("Username: ");

				foreach ($thread_data as $id => $thread) {
					if ($thread['user'] == $user) {
						execute_query("KILL $id", 0);
						$found = 1;
					}
				}
				if (!$found) {
					print_error('No threads were killed with that username!', 2);
				}
			} else if ($input == 'h') { // Kill by hostname/IP
				$host  = read_stdin("Hostname/IP: ");

				foreach ($thread_data as $id => $thread) {
					if ($thread['host'] == $host) {
						execute_query("KILL $id", 0);
						$found = 1;
					}
				}
				if (!$found) {
					print_error('No threads were killed with that hostname/IP!', 2);
				}
			} else if ($input == 't') { // Kill by time range
				$time  = read_stdin("Time range (ex. 10-20): ");
				$range = explode('-', $time);

				if (preg_match('/^\d+-\d+$/', $time)) {
					if ($range[0] > $range[1]) {
						print_error("Invalid time range! First number can't be greater than the second!", 2);
					} else {
						foreach ($thread_data as $id => $thread) {
							if ($thread['seconds'] >= $range[0] && $thread['seconds'] <= $range[1]) {
								execute_query("KILL $id", 0);
								$found = 1;
							}
						}
						if (!$found) {
							print_error('No threads were killed with that time range!', 2);
						}
					}
				} else {
					print_error('Invalid time range!', 1);
				}
			} else {
				print_error('Invalid input!', 1);
			}

			$run_command = 1;
			break;
		case 'l': // Set notify limit for slow queries
			$input = read_stdin("Notify limit in seconds for slow queries: ");

			if (is_numeric($input)) {
				$config['notify_limit'] = $input;
			} else {
				print_error('Input must be numeric!', 1);
			}

			$run_command = 1;
			break;

		case 'o': // Sort by lowest/highest time for query
			if ($config['reverse_sort']) {
				$config['reverse_sort'] = 0;
			} else {
				$config['reverse_sort'] = 1;
			}

			$run_command = 1;
			break;
		case 'p': // Pause
			pause();

			$run_command = 1;
			break;
		case 'q': // Quit!
			exit($BOLD_CYAN . "\nGoodbye!$RESET\n");
		case 'r': // Resolve IPs to hostnames
			if ($config['resolve_ip']) {
				$config['resolve_ip'] = 0;
			} else {
				$config['resolve_ip'] = 1;
			}

			$run_command = 1;
			break;
		case 'R': // Reset MySQL status counters via FLUSH STATUS
			$input = read_stdin("Are you sure you want to run FLUSH STATUS? (y/n): ");

			if ($input == 'y') {
				execute_query("FLUSH STATUS", 0);
				print($CYAN . "MySQL status counters have been reset!$RESET");
				sleep(2);
			}

			$run_command = 1;
			break;
		case 's': // Seconds of delay
			$input = read_stdin("Seconds of delay: ");

			if (is_numeric($input)) {
				$config['delay'] = $input;
			} else {
				print_error('Input must be numeric!', 1);
			}

			$run_command = 1;
			break;
		case 'S': // SET GLOBAL sql_slave_skip_counter = 1
			$input = read_stdin("Are you sure you want to execute SET GLOBAL sql_slave_skip_counter = 1? (y/n): ");

			if ($input == 'y') {
				if ($slave_status['Slave_SQL_Running'] == 'Yes') {
					print($RED . "SQL slave thread is currently running!$RESET");
				} else if (!$slave_status['Slave_SQL_Running']) {
					print($RED . "No slave configured!$RESET");
				} else {
					execute_query("SET GLOBAL sql_slave_skip_counter = 1", 0);
					execute_query("START SLAVE", 0);
					print($CYAN . "Executed SET GLOBAL sql_slave_skip_counter = 1!$RESET");
				}
				sleep(1);
			}

			$run_command = 1;
			break;
		case 't': // Filter by time
			$input = read_stdin("Minimum time to display in seconds: ");

			if (is_numeric($input)) {
				$config['time_filter'] = $input;
			} else {
				print_error('Input must be numeric!', 1);
			}

			$run_command = 1;
			break;
		case 'u': // Filter by user
			$config['user_filter'] = read_stdin("User to filter by: ");

			$run_command = 1;
			break;
		case 'v': // Display some important variables
			system('clear');

			$variables    = execute_query($commands['variables'], 1);
			$special_list = array(
				'binlog_format', 'character_set_server', 'collation_server', 'innodb_checksum_algorithm',
                'innodb_flush_method', 'innodb_file_format','innodb_file_format_max', 'innodb_file_per_table',
                'innodb_flush_log_at_trx_commit', 'innodb_open_files','interactive_timeout', 'log_bin',
                'log_queries_not_using_indexes','log_slave_updates', 'log_warnings', 'long_query_time',
                'max_connect_errors', 'max_connections', 'old_passwords', 'open_files_limit', 'port',
                'query_cache_size', 'query_cache_type', 'read_only', 'secure_auth', 'server_id',
                'skip_name_resolve', 'slow_query_log','table_definition_cache', 'table_open_cache',
                'thread_cache_size', 'wait_timeout', 'connect_timeout', 'relay_log_recovery',
                'relay_log_info_repository', 'master_info_repository', 'binlog_row_image', 'innodb_flush_neighbors',
                'innodb_read_io_threads', 'innodb_write_io_threads', 'transaction-isolation', 'sync_binlog',
                'table_open_cache_instances'
				);

			sort($special_list);
			print($BOLD . "MySQL variables for $BOLD_CYAN" . $config['server'] . "$RESET$BOLD at a glance$RESET\n\n");
			foreach ($special_list as $variable) {
				if (isset($variables[$variable])) {
					printf("%-31s %s", "$variable:", $CYAN . $variables[$variable] . "$RESET\n");
				}
			}

			pause();
			$run_command = 1;
			break;
		case 'z':
			system('clear');

			print $BOLD . "IPs and their corresponding hostnames that have connected since start of coptop$RESET\n\n";
			asort($hosts);
			foreach ($hosts as $ip => $host) {
				if (!$ip || !$host) continue;
				printf("%16s $CYAN=>$RESET %s\n", $ip, $host);
			}
			print $BOLD . "\nTotal count: $BOLD_CYAN" . count($hosts) . "$RESET\n";

			pause();
			$run_command = 1;
			break;
	}

	// Sleep and return 1 if a command was run to reset the keypress loop
	usleep($delay_microseconds);
	return $run_command;
}

function read_stdin($prompt) {
	global $CYAN, $RESET, $system_options;

	print("$CYAN$prompt$RESET");
	system($system_options);
	return stream_get_line(STDIN, 1024, PHP_EOL);
}

function pause($message = NULL) {
	global $CYAN, $RESET;

	if ($message == NULL) $message = $CYAN. "\nPaused! Press any key to resume.$RESET";
	print($message);

	readline_callback_handler_install('', function() { });
	while (1) {
		$r = array(STDIN);
		$w = NULL;
		$e = NULL;
		$n = stream_select($r, $w, $e, 0);
		if ($n && in_array(STDIN, $r)) {
			$c = stream_get_contents(STDIN, 1);
			break;
		}

		usleep(100000); // Sleep 100 milliseconds so it doesn't max out CPU
	}
}

function execute_query($query, $type) {
	global $connection, $RED, $RESET, $ansi_chars;

	$results = array();
	$data    = $connection->query($query);

	if ($data === false) {
		print($ansi_chars['SHOW_CURSOR']);
		exit("$RED" . "SQL: $RESET$query -$RED Error: $RESET" . $connection->error . "\n");
	} else {
		if ($type) $data->data_seek(0);
		if ($type == 1) {
			while ($row = $data->fetch_assoc()){
				$results[$row['Variable_name']] = $row['Value'];
			}
		} else if ($type == 2) {
			while ($row = $data->fetch_assoc()) {
				$results[] = $row;
			}
			if ($results) $results = call_user_func_array('array_merge', $results); // Flatten out the array
		} else if ($type == 3) {
			while ($row = $data->fetch_assoc()) {
				$results[] = $row;
			}
		}
	}

	return $results;
}

function print_error($message, $sleep) {
	global $RED, $RESET;

	print("$RED$message$RESET");
	sleep($sleep);
}

function email_query($id, $thread) {
	global $config;

	$email_body = "<head><style>
	span {
		font-family: serif;
		font-size: 16px;
	}
	hr {
		margin-top: 1px;
		border: none;
		height: 1px;
		color: #D2D2D2; /* old IE */
		background-color: #D2D2D2; /* Modern Browsers */
	}
	table {
		border-spacing: 0;
		border-collapse: collapse;
	}
	td,
	th {
		padding: 0;
	}
	table {
		background-color: transparent;
	}
	th {
		text-align: left;
		background-color: #f2f2f2;
	}
	.table {
		width: 45%;
		max-width: 45%;
		margin-bottom: 10px;
	}
	.table-curved {
		border-collapse: separate;
	}
	.table-curved {
		border: solid #ccc 1px;
		border-radius: 6px;
		border-left:0px;
	}
	.table-curved td, .table-curved th {
		border-left: 1px solid #ccc;
		border-top: 1px solid #ccc;
	}
	.table-curved th {
		border-top: none;
	}
	.table-curved th:first-child {
		border-radius: 6px 0 0 0;
	}
	.table-curved th:last-child {
		border-radius: 0 6px 0 0;
	}
	.table-curved th:only-child{
		border-radius: 6px 6px 0 0;
	}
	.table-curved tr:last-child td:first-child {
		border-radius: 0 0 0 3px;
	}
	.table-curved tr:last-child td:last-child {
		border-radius: 0 0 3px 0;
	}
	.table > thead > tr > th,
	.table > tbody > tr > th,
	.table > tfoot > tr > th,
	.table > thead > tr > td,
	.table > tbody > tr > td,
	.table > tfoot > tr > td {
		padding: 5px;
		line-height: 1.42857143;
		vertical-align: top;
	}
	</style></head><body>
	<table class=\"table table-curved\">
	<tr><th>Thread Information</th><th>Value</th></tr>";

	$subject     = "coptop: " . $config['server'] . " slow query";
	$headers     = 'From: coptop <coptop@dangerzone.com>' . "\r\n";
	$headers    .= 'MIME-Version: 1.0' . "\r\n";
	$headers    .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";

	$email_body .=
		"<tr><td>ID</td><td>" . $id . "</td></tr>" .
		"<tr><td>User</td><td>" . $thread['user'] . '@' . $thread['host'] . "</td></tr>" .
		"<tr><td>Database</td><td>" . $thread['db'] . "</td></tr>" .
		"<tr><td>Command</td><td>" . $thread['command'] . "</td></tr>" .
		"<tr><td>State</td><td>" . $thread['state'] . "</td></tr>" .
		"<tr><td>Time</td><td>" . $thread['formatted_time'] . "</td></tr>" .
		"</table>" .
		"<span style=\"font-size: 18px; font-weight: bold;\">Query</span>" .
		"<hr>" .
		"<span>" . $thread['info'] . "</span>";

	mail($config['notify_email'], $subject, $email_body, $headers);
}

function helpme($command) {
	global $BOLD, $CYAN, $BOLD_CYAN, $RESET, $UNDERLINE, $YELLOW, $version, $MAGENTA;

	system('clear');
	if ($command == '--help') {
		print($BOLD . "Below are the available parameters for$BOLD_CYAN coptop $version: $RESET\n");
		print("\t$UNDERLINE" . "Login$RESET\n");
		print($CYAN . "\t-u        \$user  $RESET(Will check my.cnf client section for username field)\n");
		print($CYAN . "\t-p        \$pass  $RESET(Will check my.cnf client section for password field)\n");
		print($CYAN . "\t-h        \$host$RESET\n");
		print($CYAN . "\t-P        \$port$RESET  (default: 3306) - port of server\n");

		print("\n\t$UNDERLINE" . "Options$RESET\n");
		print($CYAN . "\t--delay   \$time  $RESET(default: 1)    - Refresh delay in seconds\n");
		print($CYAN . "\t--notify  \$email $RESET(default: off)  - Send email when slow query hits --limit value\n");
		print($CYAN . "\t--limit   \$time  $RESET(default: 30)   - Notify limit in seconds\n");
		print($CYAN . "\t--ansi    0/1    $RESET(default: off)  - Ansi escape character method for smoother refresh that reduces flickering\n");
		print($CYAN . "\t--header  0/1    $RESET(default: on)   - Show header\n");
		print($CYAN . "\t--idle    0/1    $RESET(default: off)  - Show idle threads\n");
		print($CYAN . "\t--resolve 0/1    $RESET(default: on)   - Resolve IPs to hostnames\n");
		print($CYAN . "\t--sort    0/1    $RESET(default: on)   - Reverse sort\n");
		print($CYAN . "\t--prompt         $RESET(prompts for password; text is invisible)\n");

		exit;
	} else if ($command == '?') {
		print($BOLD_CYAN . "coptop $version$RESET$BOLD by Charles Thompson <" . $YELLOW . "01charles.t@gmail.com$RESET$BOLD>$RESET\n\n");
		printf("$CYAN%17s $CYAN%12s", $UNDERLINE . "Command$RESET", $UNDERLINE . "Description$RESET\n");
		printf("$BOLD%-9s$RESET %s", "     ?", "Help section\n");
		printf("$BOLD%-9s$RESET %s", "     c", "Clear all filters\n");
		printf("$BOLD%-9s$RESET %s", "     d", "Filter by database\n");
		printf("$BOLD%-9s$RESET %s", "     D", "Display available databases\n");
		printf("$BOLD%-9s$RESET %s", "     e", "Explain query/show information of a thread ID\n");
		printf("$BOLD%-9s$RESET %s", "     h", "Filter by hostname/IP\n");
		printf("$BOLD%-9s$RESET %s", "     H", "Hide/show stats header\n");
		printf("$BOLD%-9s$RESET %s", "     i", "Hide/show idle threads\n");
		printf("$BOLD%-9s$RESET %s", "     k", "Kill thread by ID\n");
		printf("$BOLD%-9s$RESET %s", "     K", "Kill threads by username, hostname, or time range\n");
		printf("$BOLD%-9s$RESET %s", "     l", "Set notify limit for slow queries\n");
		printf("$BOLD%-9s$RESET %s", "     o", "Reverse sort order\n");
		printf("$BOLD%-9s$RESET %s", "     p", "Pause screen\n");
		printf("$BOLD%-9s$RESET %s", "     q", "Quit\n");
		printf("$BOLD%-9s$RESET %s", "     r", "Resolve IPs to hostnames\n");
		printf("$BOLD%-9s$RESET %s", "     R", "Reset MySQL status counters via FLUSH STATUS\n");
		printf("$BOLD%-9s$RESET %s", "     s", "Set delay in seconds\n");
		printf("$BOLD%-9s$RESET %s", "     S", "Execute SET GLOBAL sql_slave_skip_counter = 1 & START SLAVE\n");
		printf("$BOLD%-9s$RESET %s", "     t", "Filter by minimum time\n");
		printf("$BOLD%-9s$RESET %s", "     u", "Filter by user\n");
		printf("$BOLD%-9s$RESET %s", "     v", "Display some important variables\n");
		printf("$BOLD%-9s$RESET %s", "     z", "Display the host cache\n");
		pause();
	}
}
